diff --git a/CMakeLists.txt b/CMakeLists.txt
index ee9f1d1..51f3ce6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,24 +1,5 @@
 cmake_minimum_required(VERSION 2.8)
 
-set(CUDA_ARCH "-arch=sm_50" CACHE STRING "Value of the NVCC -arch option.")
-
-option(ENABLE_ZED_DEMO "Build a Demo using ZED Camera" OFF)
-
-if(WIN32)
-  set(ZED_SDK_LIB "C:\\Program Files (x86)\\ZED SDK\\lib\\sl_zed64.lib" CACHE STRING "ZED SDK library(sl_zed**.llb) path.")
-  set(ZED_SDK_INCLUDE_DIR "C:\\Program Files (x86)\\ZED SDK\\include" CACHE STRING "ZED SDK include path.")
-else()
-  set(ZED_SDK_LIB "/usr/local/zed/lib/libsl_zed.so" CACHE STRING "ZED SDK library(sl_zed**.llb) path.")
-  set(ZED_SDK_INCLUDE_DIR "/usr/local/zed/include" CACHE STRING "ZED SDK include path.")
-endif()
-
 project(libSGM)
 
 add_subdirectory(src)
-
-add_subdirectory(sample/image)
-add_subdirectory(sample/movie)
-
-if(ENABLE_ZED_DEMO)
-	add_subdirectory(sample/zed)
-endif()
diff --git a/include/libsgm.h b/include/libsgm.h
index 94abeef..31c86ce 100644
--- a/include/libsgm.h
+++ b/include/libsgm.h
@@ -26,6 +26,12 @@ limitations under the License.
 * stereo-sgm main header
 */
 
+#if defined WIN32
+#define LIBSGM_EXPORT __declspec(dllexport)
+#else
+#define LIBSGM_EXPORT __attribute__(visibility("default"))
+#endif
+
 namespace sgm {
 	struct CudaStereoSGMResources;
 
@@ -53,9 +59,9 @@ namespace sgm {
 		* @param output_depth_bits Disparity image's bits per pixel. It must be 8 or 16.
 		* @param inout_type 	Specify input/output pointer type. See sgm::EXECUTE_TYPE.
 		*/
-		StereoSGM(int width, int height, int disparity_size, int input_depth_bits, int output_depth_bits, EXECUTE_INOUT inout_type);
+		LIBSGM_EXPORT StereoSGM(int width, int height, int disparity_size, int input_depth_bits, int output_depth_bits, EXECUTE_INOUT inout_type);
 
-		virtual ~StereoSGM();
+		LIBSGM_EXPORT virtual ~StereoSGM();
 
 		/**
 		* Execute stereo semi global matching.
@@ -66,7 +72,7 @@ namespace sgm {
 		* For performance reason, when the instance is created with inout_type == EXECUTE_INOUT_**2CUDA, output_depth_bits == 16, 
 		* you don't have to allocate dst memory yourself. It returns internal cuda pointer. You must not free the pointer.
 		*/
-		void execute(const void* left_pixels, const void* right_pixels, void** dst);
+		LIBSGM_EXPORT void execute(const void* left_pixels, const void* right_pixels, void** dst);
 
 	private:
 		StereoSGM(const StereoSGM&);
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index af93aff..f6c8023 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,17 +1,32 @@
-find_package(CUDA REQUIRED)
-
 include_directories(../include)
 
-SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} ${CUDA_ARCH}")
+find_package(CUDA REQUIRED)
 
-SET(STEREOSRCS 
-	census.cu 
-	matching_cost.cu 
-	scan_scost.cu 
-	winner_takes_all.cu 
-	median_filter.cu 
-	check_consistency.cu 
+SET(STEREOSRCS
+	census.cu
+	matching_cost.cu
+	scan_scost.cu
+	winner_takes_all.cu
+	median_filter.cu
+	check_consistency.cu
 	cuda_utils.cu
 )
 
-CUDA_ADD_LIBRARY(sgm stereo_sgm.cpp ${STEREOSRCS} STATIC)
+unset(CUDA_NVCC_FLAGS)
+CUDA_SELECT_NVCC_ARCH_FLAGS(CUDA_NVCC_FLAGS "${CUDA_ARCH_BIN}")
+
+CUDA_ADD_LIBRARY(sgm stereo_sgm.cpp ${STEREOSRCS} SHARED)
+target_link_libraries(sgm ${CUDA_nppi_LIBRARY})
+
+install(
+    TARGETS sgm
+    ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
+    LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
+    RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
+)
+
+install(
+    DIRECTORY ${CMAKE_SOURCE_DIR}/include
+    DESTINATION ${CMAKE_INSTALL_PREFIX}
+    FILES_MATCHING PATTERN "*.h" PATTERN "*.hpp"
+)
