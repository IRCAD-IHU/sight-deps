diff --git a/Modules/Filtering/Convolution/include/itkMaskedFFTNormalizedCorrelationImageFilter.hxx b/Modules/Filtering/Convolution/include/itkMaskedFFTNormalizedCorrelationImageFilter.hxx
index e58f3f9..baa9ee8 100644
--- a/Modules/Filtering/Convolution/include/itkMaskedFFTNormalizedCorrelationImageFilter.hxx
+++ b/Modules/Filtering/Convolution/include/itkMaskedFFTNormalizedCorrelationImageFilter.hxx
@@ -80,24 +80,24 @@ public:
     return !( *this != other );
   }
 
-  inline TImage operator()( const TImage & NCC, const TImage & denominator, const TImage & numberOfOverlapPixels ) const
+  inline TImage operator()( const TImage & _NCC, const TImage & denominator, const TImage & numberOfOverlapPixels ) const
   {
     TImage outputValue;
     if( denominator < m_PrecisionTolerance || numberOfOverlapPixels == 0.0 || numberOfOverlapPixels < m_RequiredNumberOfOverlappingPixels )
     {
       outputValue = 0.0;
     }
-    else if( NCC < -1 )
+    else if( _NCC < -1 )
     {
       outputValue = -1.0;
     }
-    else if( NCC > 1 )
+    else if( _NCC > 1 )
     {
       outputValue = 1.0;
     }
     else
     {
-      outputValue = NCC;
+      outputValue = _NCC;
     }
     return outputValue;
   }
@@ -227,7 +227,7 @@ void MaskedFFTNormalizedCorrelationImageFilter<TInputImage, TOutputImage, TMaskI
   // Determine a tolerance on the precision of the denominator values.
   const double precisionTolerance = CalculatePrecisionTolerance<RealImageType>( denominator );
 
-  RealImagePointer NCC = this->ElementQuotient<RealImageType>(numerator,denominator);
+  RealImagePointer _NCC = this->ElementQuotient<RealImageType>(numerator,denominator);
   numerator = ITK_NULLPTR; // No longer needed
 
   // Given the numberOfOverlapPixels, we can check that the m_RequiredNumberOfOverlappingPixels is not set higher than
@@ -256,7 +256,7 @@ void MaskedFFTNormalizedCorrelationImageFilter<TInputImage, TOutputImage, TMaskI
   typename PostProcessType::Pointer postProcessor = PostProcessType::New();
   postProcessor->GetFunctor().SetRequiredNumberOfOverlappingPixels( requiredNumberOfOverlappingPixels );
   postProcessor->GetFunctor().SetPrecisionTolerance( precisionTolerance );
-  postProcessor->SetInput1( NCC );
+  postProcessor->SetInput1( _NCC );
   postProcessor->SetInput2( denominator );
   postProcessor->SetInput3( numberOfOverlapPixels );
   postProcessor->SetInPlace( true ); // Save some memory
