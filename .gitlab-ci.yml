stages:
  - build
  - deploy

.linux_template: &linux_job
  image: "${SIGHT_CI_UBUNTU20_10}:dev"
  before_script:
    - mkdir -p $CI_PROJECT_DIR/install $CI_PROJECT_DIR/build
    - sudo chown -R sight:sight .
    # Reset the time of all files to improve the use of ccache.
    - /usr/lib/git-core/git-restore-mtime --force --skip-missing --commit-time
    # Merge the branch into dev.
    - >
      if [ -z "$CI_COMMIT_TAG" ] && [ "$CI_COMMIT_REF_NAME" != "dev" ] && [ "$CI_COMMIT_REF_NAME" != "master" ]; then
        git config user.name ${GITLAB_USER_ID}
        git config user.email ${GITLAB_USER_EMAIL}
        git fetch --all
        git checkout dev
        git reset --hard origin/dev
        git merge "origin/"${CI_COMMIT_REF_NAME} --no-commit --no-ff
        export EXTRA_BRANCH="dev"
      else
        export EXTRA_BRANCH="${CI_COMMIT_REF_NAME}"
      fi

build:debug-linux:
  <<: *linux_job
  stage: build
  dependencies: []
  script:
    # Build the project on the merge result.
    - mkdir -p $CI_PROJECT_DIR/archive
    - rm -rf $CI_PROJECT_DIR/archive/* $CI_PROJECT_DIR/build/* $CI_PROJECT_DIR/install/*
    - cd $CI_PROJECT_DIR/build/
    - ccache -s
    # PCH are disabled because they don't work with ccache.
    - >
      cmake $CI_PROJECT_DIR
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
      -DCMAKE_BUILD_TYPE=Debug
    - find . -type f -iname '*.?pp' -exec touch -t 197001010000 {} \;
    - ninja
    # Install and build the package
    - ninja install
    - ninja package
    - ccache -s
    # Retrieve package name and store it as environment files since inherited environment variable is experimental
    # and need to explicitly enabled (https://docs.gitlab.com/ee/ci/variables/#enable-inherited-environment-variables-core-only)
    - export DEBUG_ARCHIVE_FILE_PATH=$(find $CI_PROJECT_DIR/build -maxdepth 1 -iname '*.tar.gz' -type f -print -quit)
    - export DEBUG_ARCHIVE_NAME=$(basename -s .tar.gz ${DEBUG_ARCHIVE_FILE_PATH})
    - mv ${DEBUG_ARCHIVE_FILE_PATH} $CI_PROJECT_DIR/archive/debug_archive.tar.gz
    - echo "export DEBUG_ARCHIVE_NAME=${DEBUG_ARCHIVE_NAME}" > $CI_PROJECT_DIR/archive/DEBUG_ARCHIVE_NAME.env
    - cat $CI_PROJECT_DIR/archive/DEBUG_ARCHIVE_NAME.env
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SIGHTDEPS"
    paths:
      - $CI_PROJECT_DIR/archive/DEBUG_ARCHIVE_NAME.env
      - $CI_PROJECT_DIR/archive/debug_archive.tar.gz
    when: always

build:relwithdebinfo-linux:
  <<: *linux_job
  stage: build
  dependencies: []
  script:
    # Build the project on the merge result.
    - mkdir -p $CI_PROJECT_DIR/archive
    - rm -rf $CI_PROJECT_DIR/archive/* $CI_PROJECT_DIR/build/* $CI_PROJECT_DIR/install/*
    - cd $CI_PROJECT_DIR/build/
    - ccache -s
    # PCH are disabled because they don't work with ccache.
    - >
      cmake $CI_PROJECT_DIR
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
      -DCMAKE_BUILD_TYPE=RelWithDebInfo
    - find . -type f -iname '*.?pp' -exec touch -t 197001010000 {} \;
    - ninja
    # Install and build the package
    - ninja install
    - ninja package
    - ccache -s
    # Retrieve package name and store it as environment files since inherited environment variable is experimental
    # and need to explicitly enabled (https://docs.gitlab.com/ee/ci/variables/#enable-inherited-environment-variables-core-only)
    - export RELWITHDEBINFO_ARCHIVE_FILE_PATH=$(find $CI_PROJECT_DIR/build -maxdepth 1 -iname '*.tar.gz' -type f -print -quit)
    - export RELWITHDEBINFO_ARCHIVE_NAME=$(basename -s .tar.gz ${RELWITHDEBINFO_ARCHIVE_FILE_PATH})
    - mv ${RELWITHDEBINFO_ARCHIVE_FILE_PATH} $CI_PROJECT_DIR/archive/relwithdebinfo_archive.tar.gz
    - echo "export RELWITHDEBINFO_ARCHIVE_NAME=${RELWITHDEBINFO_ARCHIVE_NAME}" > $CI_PROJECT_DIR/archive/RELWITHDEBINFO_ARCHIVE_NAME.env
    - cat $CI_PROJECT_DIR/archive/RELWITHDEBINFO_ARCHIVE_NAME.env
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SIGHTDEPS"
    paths:
      - $CI_PROJECT_DIR/archive/RELWITHDEBINFO_ARCHIVE_NAME.env
      - $CI_PROJECT_DIR/archive/relwithdebinfo_archive.tar.gz
    when: always

deploy:debug-linux:
  <<: *linux_job
  stage: deploy
  when: manual
  script:
    - source $CI_PROJECT_DIR/archive/DEBUG_ARCHIVE_NAME.env
    - >
      if [ -z "$CI_COMMIT_TAG" ] && [ "$CI_COMMIT_REF_NAME" != "dev" ] && [ "$CI_COMMIT_REF_NAME" != "master" ]; then
        export DEBUG_ARTIFACTORY_NAME=${DEBUG_ARCHIVE_NAME}
      else
        export DEBUG_ARTIFACTORY_NAME="sight-deps-debug-latest-$CI_COMMIT_REF_NAME-linux.tar.gz"
      fi
    - curl -u${CONAN_USERNAME}:${CONAN_PASSWORD} -T $CI_PROJECT_DIR/archive/debug_archive.tar.gz "https://conan.ircad.fr/artifactory/data/sight-deps/${DEBUG_ARTIFACTORY_NAME}"
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SIGHTDEPS"
    paths:
      - $CI_PROJECT_DIR/archive/debug_archive.tar.gz

deploy:relwithdebinfo-linux:
  <<: *linux_job
  stage: deploy
  when: manual
  script:
    - source $CI_PROJECT_DIR/archive/RELWITHDEBINFO_ARCHIVE_NAME.env
    - >
      if [ -z "$CI_COMMIT_TAG" ] && [ "$CI_COMMIT_REF_NAME" != "dev" ] && [ "$CI_COMMIT_REF_NAME" != "master" ]; then
        export RELWITHDEBINFO_ARTIFACTORY_NAME=${RELWITHDEBINFO_ARCHIVE_NAME}
      else
        export RELWITHDEBINFO_ARTIFACTORY_NAME="sight-deps-relwithdebinfo-latest-$CI_COMMIT_REF_NAME-linux.tar.gz"
      fi
    - curl -u${CONAN_USERNAME}:${CONAN_PASSWORD} -T $CI_PROJECT_DIR/archive/relwithdebinfo_archive.tar.gz "https://conan.ircad.fr/artifactory/data/sight-deps/${RELWITHDEBINFO_ARTIFACTORY_NAME}"
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SIGHTDEPS"
    paths:
      - $CI_PROJECT_DIR/archive/relwithdebinfo_archive.tar.gz
