stages:
  - build
  - deploy

.linux_template: &linux_job
  image: "${SIGHT_CI_UBUNTU20_10}:dev"

.linux_build_template: &linux_build
  image: "${SIGHT_CI_UBUNTU20_10}:dev"
  stage: build
  dependencies: []
  before_script:
    - mkdir -p $CI_PROJECT_DIR/install $CI_PROJECT_DIR/build
    - sudo chown -R sight:sight .
    # Merge the branch into dev.
    - >
      if [ -z "$CI_COMMIT_TAG" ] && [ "$CI_COMMIT_REF_NAME" != "dev" ] && [ "$CI_COMMIT_REF_NAME" != "master" ]; then
        git config user.name ${GITLAB_USER_ID}
        git config user.email ${GITLAB_USER_EMAIL}
        git fetch --all
        git checkout dev
        git reset --hard origin/dev
        git merge "origin/"${CI_COMMIT_REF_NAME} --no-commit --no-ff
      fi
    # Build the project on the merge result.
    - mkdir -p $CI_PROJECT_DIR/archive
    - rm -rf $CI_PROJECT_DIR/archive/* $CI_PROJECT_DIR/build/* $CI_PROJECT_DIR/install/*
    - cd $CI_PROJECT_DIR/build/
    - >
      cmake $CI_PROJECT_DIR
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
      -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
    - ninja
    # Install and build the package
    - ninja install
    - ninja package
    # Retrieve package name and store it as environment files since inherited environment variable is experimental
    # and need to explicitly enabled (https://docs.gitlab.com/ee/ci/variables/#enable-inherited-environment-variables-core-only)
    - export ARCHIVE_FILE_PATH=$(find $CI_PROJECT_DIR/build -maxdepth 1 -iname '*.tar.zst' -type f -print -quit)
    - export ARCHIVE_NAME=$(basename -s .tar.zst ${ARCHIVE_FILE_PATH})
    - mv ${ARCHIVE_FILE_PATH} $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.tar.zst
    - echo "export ARCHIVE_NAME=${ARCHIVE_NAME}" > $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.env

build:debug-linux:
  <<: *linux_build
  variables:
    BUILD_TYPE: "Debug"
  script:
    - cat $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.env
    - ls -la $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.tar.zst
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SIGHTDEPS"
    paths:
      # We cannot use ${DEBUG_ARCHIVE_NAME} here
      - $CI_PROJECT_DIR/archive/Debug_archive.env
      - $CI_PROJECT_DIR/archive/Debug_archive.tar.zst
    when: always

build:release-linux:
  <<: *linux_build
  variables:
    BUILD_TYPE: "Release"
  script:
    - cat $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.env
    - ls -la $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.tar.zst
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SIGHTDEPS"
    paths:
      # We cannot use ${RELEASE_ARCHIVE_NAME} here
      - $CI_PROJECT_DIR/archive/Release_archive.env
      - $CI_PROJECT_DIR/archive/Release_archive.tar.zst
    when: always

build:relwithdebinfo-linux:
  <<: *linux_build
  variables:
    BUILD_TYPE: "RelWithDebInfo"
  script:
    - cat $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.env
    - ls -la $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.tar.zst
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SIGHTDEPS"
    paths:
      # We cannot use ${RELEASE_ARCHIVE_NAME} here
      - $CI_PROJECT_DIR/archive/RelWithDebInfo_archive.env
      - $CI_PROJECT_DIR/archive/RelWithDebInfo_archive.tar.zst
    when: always

.linux_deploy_template: &linux_deploy
  image: "${SIGHT_CI_UBUNTU20_10}:dev"
  stage: deploy
  dependencies: []
  before_script:
    - source $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.env
    - >
      if [ -z "$CI_COMMIT_TAG" ] && [ "$CI_COMMIT_REF_NAME" != "dev" ] && [ "$CI_COMMIT_REF_NAME" != "master" ]; then
        curl -u${CONAN_USERNAME}:${CONAN_PASSWORD} -T $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.tar.zst "https://conan.ircad.fr/artifactory/data/sight-deps/${ARCHIVE_NAME}.tar.zst"
      else
        curl -u${CONAN_USERNAME}:${CONAN_PASSWORD} -T $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.tar.zst "https://conan.ircad.fr/artifactory/data/sight-deps/${ARCHIVE_NAME}-$CI_COMMIT_REF_NAME.tar.zst"
        curl -u${CONAN_USERNAME}:${CONAN_PASSWORD} -T $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.tar.zst "https://conan.ircad.fr/artifactory/data/sight-deps/sight-deps-${BUILD_TYPE}-latest-Linux.tar.zst"
      fi

deploy:debug-linux:
  <<: *linux_deploy
  variables:
    BUILD_TYPE: "Debug"
  when: manual
  script:
    - cat $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.env
    - ls -la $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.tar.zst
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SIGHTDEPS"
    paths:
      # We cannot use ${DEBUG_ARCHIVE_NAME} here
      - $CI_PROJECT_DIR/archive/Debug_archive.env
      - $CI_PROJECT_DIR/archive/Debug_archive.tar.zst
    when: always

deploy:release-linux:
  <<: *linux_deploy
  variables:
    BUILD_TYPE: "Release"
  when: manual
  script:
    - cat $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.env
    - ls -la $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.tar.zst
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SIGHTDEPS"
    paths:
      # We cannot use ${RELEASE_ARCHIVE_NAME} here
      - $CI_PROJECT_DIR/archive/Release_archive.env
      - $CI_PROJECT_DIR/archive/Release_archive.tar.zst
    when: always

deploy:relwithdebinfo-linux:
  <<: *linux_deploy
  variables:
    BUILD_TYPE: "RelWithDebInfo"
  when: manual
  script:
    - cat $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.env
    - ls -la $CI_PROJECT_DIR/archive/${BUILD_TYPE}_archive.tar.zst
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SIGHTDEPS"
    paths:
      # We cannot use ${RELWITHDEBINFO_ARCHIVE_NAME} here
      - $CI_PROJECT_DIR/archive/RelWithDebInfo_archive.env
      - $CI_PROJECT_DIR/archive/RelWithDebInfo_archive.tar.zst
    when: always
